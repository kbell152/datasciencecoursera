corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
corr("specdata", 3000)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 3000)
corr("specdata", 300)
test <- data.frame(x = 2, y = 5, z = 3)
with(test, ifelse(z > 0 & x > 0 | y > 3, "yes", "no"))
test
m <- cbind(1, 1:7) # the '1' (= shorter vector) is recycled
m
m <- rbind(1, 1:7) # the '1' (= shorter vector) is recycled
m
test
m <- rbind(test,1:3)
m
test
z <- rbind(test,1:3)
z
z <- rbind(test,1:3)
z
z <- rbind(z,1:3)
z
rbind(z,1:3)
z
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
x <- 1
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
source('~/Desktop/Coursera/R_Code/corr.R')
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
source('~/Desktop/Coursera/R_Code/corr.R')
source('~/Desktop/Coursera/R_Code/corr.R')
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
corr("specdata", 300)
source('~/Desktop/Coursera/R_Code/corr.R')
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("my", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Ken")
my_name
paste(my_name, colapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z") sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_data
my_na
my_data == NA
sum(my_na)
my_dada
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
[y > 0]
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(my_matrix)
cbind(patients,my_matrix)
data.frame(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
(5 != 7) != TRUE
(5 !== 7)
5 !== 7
!(5 == 7)
!5 == 7
FALSE & FASLE
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 < 4)
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 ==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
class(flags)
play()
as.list(flags))
as.list(flags)
nxt()
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
play()
ind <- list(c(1, 2, 2), c("A", "A", "B"))
ind
table(ind)
ind
tapply(1:3, ind)
tapply(1:3, ind, sum)
junk <- table(ind)
junk
?table
nxt()
table(flags$landmass)
table(flags$anumate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
play()
flags[,1]
flags[flags$landmass == 1, "name"]
length(flags[flags$landmass == 1, "name"])
nxt()
play()
tapply(flags$name, flags$landmass, print)
tapply(flags$name, flags$landmass == 1, print)
nxt()
tapply(flags$name, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
main()
main()
skip()
skip()
skip()
skip()
main()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
bye()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector
makeVector()
m
x
makeVector(22)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(3,2)
cachemean(3)
cachemean()
cachemean(makeVector())
cachemean(makeVector(3))
cachemean(makeVector(3,2,1))
cachemean(makeVector(y))
cachemean(makeVector(100))
z <- 1:100
cachemean(makeVector(z))
mean(z)
cachemean(makeVector(z))
cachemean(makeVector(z))
cachemean(makeVector(z))
debug(cachemean)
cachemean(makeVector(z))
m
matrix(rnorm(30), ncol = 3)
z <- matrix(rnorm(30), ncol = 3)
cachemean(makeVector(z))
cachemean(makeVector(z))
cachemean(makeVector(z))
debug()
?debug
undebug(cachemean)
cachemean(makeVector(z))
cachemean(makeVector(z))
cachemean
makeVector
cachemean
makeVector(3)
makeVector(z)
debug(makeVector)
makeVector(z)
makeVector(z)
makeVector()
makeVector()
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
list(set = set, get = get, setmean = setmean, getmean = getmean)
?list
list(x)
list(z)
list(cachemean)
q <- list()
makeVector(w)
z <- makeVector(w)
undebugm(akeVector)
undebug(makeVector)
z <- makeVector(w)
z
debug(makeVector)
makeVector(5)
bigVec <- makeVector(1:1000)
cachemean <-
function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <-
function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
bigVec <- makeVector(1:1000)
bigVec
biggerVec <- makeVector(1:100000)
cachemean(bigVec)
cachemean(bigVec)
cachemean(biggerVec)
cachemean(biggerVec)
bigVec <- makeVector(1:2)
cachemean(bigVec)
cachemean(bigVec)
source('~/Repos/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/Repos/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/Repos/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
myMatrix <- matrix(2,2)
myMatrix
myMatrix <- matrix(2,3,4,5)
myMatrix
myMatrix <- matrix(2,2,2)
myMatrix
makeCacheMatrix(myMatrix)
source('~/Repos/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(myMatrix)
test <- makeCacheMatrix(myMatrix)
cacheSolve(test)
myMatrix <- matrix(2,0,1)
myMatrix
myMatrix <- matrix(2,2,1)
myMatrix
myMatrix <- matrix(0,1,2,2)
myMatrix
myMatrix <- matrix(0,2,3,2)
myMatrix
myMatrix <- matrix(0,2,2,3)
myMatrix
myMatrix <- matrix(0,2,2)
myMatrix
myMatrix <- matrix(0,4,4)
myMatrix
myMatrix[1,1]
myMatrix[1,1] <- 1
myMatrix[2,2] <- 1
myMatrix[3,3] <- 1
myMatrix[4,4] <- 1
myMatrix
source('~/Repos/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
test2 <- makeCacheMatrix(myMatrix)
cacheSolve(test2)
cacheSolve(test2)
source('~/Repos/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
str(makeCacheMatrix)
summary(makeCacheMatrix)
system.time(readLines(google.com))
system.time(readLines("google.com"))
system.time(readLines("http://www.google.com"))
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?rnorm
getpwd
getpwd()
getwd()
?setwd
setwd(~/Repos/datasciencecoursera)
setwd(~\Repos\datasciencecoursera)
setwd("~/Repos/datasciencecoursera")
getwd()
